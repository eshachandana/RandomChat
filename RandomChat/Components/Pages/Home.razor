@page "/"
@using RandomChat.Client.Services
@inject ChatService ChatService
@implements IAsyncDisposable
@rendermode InteractiveServer


<div class="center-content">
<h2 style="color : black">CHAT ROOM </h2>
</div>
@if (string.IsNullOrEmpty(userInput))
{
    <div class="login-container">
        <h2 style="color : forestgreen">Enter Chat Room</h2>
        <input @bind="usernameInput" placeholder="Enter your username" class="username-input" />
        <button @onclick="SubmitUsername" class="submit-button">Enter Chat</button>
        
    </div>
}
else
{
    <div class="chat-container">
        <div class="message-list">
            @foreach (var message in messages)
            {
                <div class="message" @key="message">
                    <span class="user">@message.User:</span>
                    <span class="content">@message.Content</span>
                </div>
            }
        </div>
        <div class="input-area">
            <input @bind="messageInput"
                   @bind:event="oninput"
                   @onkeyup="HandleKeyPress"
                   placeholder="Type a message..."
                   class="message-input"
                   autofocus />
            <button @onclick="SendMessage" class="send-button">Send</button>
        </div>
       
    </div>
    
}


<style>
    .center-content {
        text-align: center;
        margin-bottom: 30px;
    }
    body {
        background-color: #f0f0f0;
        font-family: Arial, sans-serif;
    }

    .login-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 50vh;
        max-width: 400px;
        margin: auto;
        background-color: #E8F5E9;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
        text-align: center;
    }

    .username-input {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 1rem;
        margin-bottom: 10px;
        width: 80%;
        text-align: center;
    }

    .submit-button {
        padding: 10px 20px;
        border: none;
        background-color: #007bff;
        color: #fff;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        margin-bottom: 10px;
        width: 80%;
    }

        .submit-button:hover {
            background-color: green;
        }

    .error-message {
        color: #d9534f;
        margin-top: 10px;
    }

    .chat-container {
        display: flex;
        flex-direction: column;
        height: 90vh;
        max-width: 600px;
        margin: auto;
        border: 1px solid #ccc;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        background-color: #ffffff;
    }

    .message-list {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
        background-color: white;
    }

    .message {
        margin: 10px 0;
        padding: 10px;
        border-radius: 5px;
        background-color: #F5FFFA;
    }

    .user {
        font-weight: bold;
        margin-right: 5px;
        color: black;
    }

    .content {
        color: #555;
    }

    .input-area {
        display: flex;
        padding: 10px;
        background-color: #F5FFFA;
        border-top: 1px solid #ccc;
    }

    .message-input {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 1rem;
    }

    .send-button {
        padding: 10px 20px;
        border: none;
        background-color: forestgreen;
        color: #fff;
        border-radius: 5px;
        margin-left: 10px;
        cursor: pointer;
        font-size: 1rem;
    }

        .send-button:hover {
            background-color: #0056b3;
        }

    .debug-message {
        padding: 10px;
        background-color: #ffe5e5;
        color: darkslategrey;
        border-top: 1px solid #ccc;
    }
</style>

@code {
    private List<Message> messages = new List<Message>();
    private string messageInput = "";
    private string usernameInput = "";
    private string userInput = "";
    private string debugMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await ChatService.InitializeAsync();
        ChatService.MessageReceived += OnMessageReceived;
    }

    private async void OnMessageReceived(string user, string content)
    {
        await InvokeAsync(() =>
        {
            messages.Add(new Message { User = user, Content = content });
            StateHasChanged();
        });
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(messageInput))
        {
            try
            {
                var message = new Message { User = userInput, Content = messageInput };
                await ChatService.SendMessageAsync(userInput, message.Content);
                messageInput = "";
                debugMessage = "Message sent successfully!";
            }
            catch (Exception ex)
            {
                debugMessage = "Error: " + ex.Message;
            }
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            debugMessage = "Message input is empty.";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private void SubmitUsername()
    {
        if (!string.IsNullOrEmpty(usernameInput))
        {
            userInput = usernameInput;
        }
        else
        {
            debugMessage = "Username cannot be empty.";
        }
    }

    public async ValueTask DisposeAsync()
    {
        ChatService.MessageReceived -= OnMessageReceived;
        await ChatService.DisposeAsync();
    }

    private class Message
    {
        public string User { get; set; }
        public string Content { get; set; }
    }
}